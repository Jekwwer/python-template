# tox.ini: Automates testing in isolated environments.

# Usage:
# - `tox`: Runs all environments listed in envlist (py312, lint, format, bandit, mypy, pylint).
# - `tox -e py312`: Runs Python 3.12 tests.
# - `tox -e runapp`: Runs the application.
# - `tox -e lint`: Runs linters (flake8, isort, autopep8) to check code quality.
# - `tox -e format`: Automatically formats code.
# - `tox -e bandit`: Runs security vulnerability checks.
# - `tox -e mypy`: Checks for type hints.
# - `tox -e pylint`: Runs pylint for additional code quality checks.

[tox]
envlist = py312, lint, format, bandit, mypy, pylint

[gh-actions]
python =
    3.12: py312

[testenv]
description = Run tests and linting
basepython = python3.12
deps = .[dev,test]
setenv =
    PYTHONPATH = {toxinidir}/src
    PROJECT_PATH = src/project_name
    UTILS_PATH = src/utils
    TESTS_PATH = tests
commands =
    pytest -v -n auto --tb=short --maxfail=1 --cov=src --cov-report=term-missing --capture=sys
    # - `-v`: Verbose mode, showing detailed output for each test.
    # - `-n auto`: Runs tests in parallel using all CPU cores.
    # - `--tb=short`: Short traceback for test failures.
    # - `--maxfail=1`: Stops after the first failure.
    # - `--cov=src`: Generates coverage report for `src/`.
    # - `--cov-report=term-missing`: Shows uncovered lines.
    # - `--capture=sys`: Captures system output in logs.

[testenv:runapp]
description = Run the application
commands = python {env:PROJECT_PATH}/main.py

[testenv:lint]
description = Run linters to check code quality
deps = .[lint,format]
commands =
    flake8 {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}
    pylint {env:PROJECT_PATH} --rcfile=.pylintrc
    isort --check-only {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}
    autopep8 --diff --exit-code {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}

[testenv:format]
description = Run formatters to format code
deps = .[format]
commands =
    isort {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}
    autopep8 --in-place {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}

[testenv:bandit]
description = Run Bandit to check for security issues
deps = .[bandit]
commands =
    bandit -c pyproject.toml -r {env:PROJECT_PATH} {env:UTILS_PATH} --format txt -o bandit-report.txt --verbose

[testenv:mypy]
description = Run mypy to check for type hints
deps = .[mypy]
commands = mypy {env:PROJECT_PATH} {env:UTILS_PATH}
