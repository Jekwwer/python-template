# ========================================================
# tox.ini
# ========================================================
# Project Name: PROJECT_NAME
# Description: Configuration file for tox, a generic virtualenv
#              management and test command line tool.
#
# Usage: Tox is used to automate testing in isolated environments.
#        It creates virtual environments, installs dependencies,
#        and runs test commands as specified.
#
# Run it using:
#   - `tox`: Runs all environments listed in envlist (py312, lint, format, bandit, mypy, pylint).
#   - `tox -e py312`: Runs the environment for Python 3.12 tests.
#   - `tox -e runapp`: Runs the application.
#   - `tox -e lint`: Runs linters (flake8, isort, autopep8) to check for code quality issues.
#   - `tox -e format`: Automatically formats code using isort and autopep8.
#   - `tox -e bandit`: Runs Bandit to check for security vulnerabilities.
#   - `tox -e mypy`: Checks for type hints using mypy.
#   - `tox -e pylint`: Runs pylint for additional code quality checks.
#
# Repository: https://github.com/GITHUB_USERNAME/REPOSITORY_NAME
#
# Author: AUTHOR_NAME
#
# Date: CREATED_DATE
# ========================================================

[tox]
envlist = py312, lint, format, bandit, mypy, pylint

[gh-actions]
python =
    3.12: py312

[testenv]
description = Run tests and linting
basepython = python3.12
deps =
    .[dev,test]
setenv =
    PYTHONPATH = {toxinidir}/src
    PROJECT_PATH = src/project_name
    UTILS_PATH = src/utils
    TESTS_PATH = tests
commands =
    pytest -v -n auto --tb=short --maxfail=1 --cov=src --cov-report=term-missing --capture=sys #--cov-fail-under=80
#   - `-v`: Verbose mode, which shows detailed output of each test case.
#   - `-n auto`: Runs tests in parallel using all available CPU cores.
#   - `--tb=short`: Limits traceback information to be concise.
#   - `--maxfail=1`: Stops after the first test failure.
#   - `--cov=src`: Generates a coverage report for the `src/` directory.
#   - `--cov-report=term-missing`: Shows coverage report on terminal and highlights uncovered lines.
#   - `--capture=sys`: Captures system output and displays it in pytest logs.
#   - `--cov-fail-under=80`: Fails if the coverage is less than 80%.

[testenv:runapp]
description = Run the application
commands = python {env:PROJECT_PATH}/main.py

[testenv:lint]
description = Run linters to check code quality
deps = .[lint,format]
commands =
    flake8 {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}
    pylint {env:PROJECT_PATH} --rcfile=.pylintrc
    isort --check-only {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}
    autopep8 --diff --exit-code {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}

[testenv:format]
description = Run formatters to format code
deps = .[format]
commands =
    isort {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}
    autopep8 --in-place {env:PROJECT_PATH} {env:UTILS_PATH} {env:TESTS_PATH}

[testenv:bandit]
description = Run bandit to check for security issues
deps = .[bandit]
commands =
    bandit -c pyproject.toml -r {env:PROJECT_PATH} {env:UTILS_PATH} --format txt -o bandit-report.txt --verbose

[testenv:mypy]
deps = .[mypy]
description = Run mypy to check for type hints
commands = mypy {env:PROJECT_PATH} {env:UTILS_PATH}

# ========================================================
# End of tox.ini
# ========================================================
